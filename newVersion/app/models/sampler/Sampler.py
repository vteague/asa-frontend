import pandas as pd
from app import db
from app.models.BaseModel import BaseModel


class Sampler(BaseModel):
    """
    Sampler table，storing the data from the csv file generated by ASA
    Table name：samplers
    Primary key: id
    """
    __tablename__ = "samplers"
    primaryKey = 'id'

    id = db.Column(db.Integer, primary_key=True)
    electorate_nm = db.Column(db.String(200))
    vote_collection_point_nm = db.Column(db.String(200))
    vote_collection_point_id = db.Column(db.Integer)
    batch_no = db.Column(db.Integer)
    paper_no = db.Column(db.Integer)
    preferences = db.Column(db.TEXT)
    match = db.Column(db.Integer)
    preferences_after_audit = db.Column(db.TEXT)
    job_id = db.Column(db.Integer)

    def __init__(self, electorate_nm=None, vote_collection_point_nm=None, vote_collection_point_id=None, batch_no=None,
                 paper_no=None,
                 preferences=None, match=None, preferences_after_audit=None, job_id=None):
        self.electorate_nm = electorate_nm
        self.vote_collection_point_nm = vote_collection_point_nm
        self.vote_collection_point_id = vote_collection_point_id
        self.batch_no = batch_no
        self.paper_no = paper_no
        self.preferences = preferences
        self.match = match
        self.preferences_after_audit = preferences_after_audit
        self.job_id = job_id

    def getById(self, jobId):
        """
        Using ID to get all of the records
        :param jobId:
        :return:
        """
        return self.query.filter(Sampler.job_id == jobId).all()

    def importSampler(self, filename, jobId):
        """
        import the sampling data
        adding the sampling data continuously before finally submit to the database
        This function helps to prevent explore the session_commit method to the Repository
        :param filename: file path
        :param jobId: JobId
        :return:
        """
        data = self.loadData(filename)  # loading csv data
        for item in data:  # using for loop to read the data
            record = Sampler(**{
                'electorate_nm': item[0],
                'vote_collection_point_nm': item[1],
                'vote_collection_point_id': item[2],
                'batch_no': item[3],
                'paper_no': item[4],
                'preferences': item[5],
                'job_id': jobId
            })  # turning the data of CSV to the object of Sampler
            db.session.add(record)  # adding db.session
        return self.session_commit()  # committing the result to the database

    @staticmethod
    def loadData(filename):
        """
        loading csv data
        :param filename: file path
        :return: list
        """
        data = pd.read_csv(filename)
        return data.values

    def get(self, id):
        return Sampler.query.filter(Sampler.id == id).first()
